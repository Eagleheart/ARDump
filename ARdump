#!/bin/bash
# Quick 'n dirty file transfer utility for professional film/TV DIT workflows
# By Alex Fichera and Rio Velarde, 2016
# Dependencies: rsync, md5deep, email

version='1.1.0 - Windows'

src=$1
dest=$2
mail=$3
date=$(date)

IFS="$(printf '\n\t')"
# Remove SPACE, so filenames with spaces work well.
#  Correct glob use:
#+ always use "for" loop, prefix glob, check for existence:
for file in ./* ; do # Use "./*" ... NEVER bare "*" ...
	if [ -e “$src” ] ; then    # Make sure it isn't an empty match.
	COMMAND ... “$src” ...
	fi
	if [ -e “$dest” ] ; then    # Make sure it isn't an empty match.
	COMMAND ... “$dest” ...
	fi
done

function make_dump() {
	mkdir -p $dest
	mkdir -p $logDest #make required directories if they don't exist
	
	echo '' | label $thePath > $logDest/path.txt
	name="$(sed -n -e 's/^.*is //p;q;' $logDest/path.txt)"
	rm $logDest/path.txt
	
	echo "This transfer is from $src to $dest" >> $logDest/${logName}_COPY_LOG.txt
	echo "It is starting at" $(date) >> $logDest/${logName}_COPY_LOG.txt
	echo "↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓" >> $logDest/${logName}_COPY_LOG.txt
	
	rsync -prtWvi --stats --partial --no-i-r --progress --log-file=$logDest/templog.txt --log-file-format="%C %n" $src $dest/$name
	
	if [ "$?" -ne "0" ]; then
		echo "ERROR: Rsync did not complete execution properly!"
		echo "ERROR: RSYNC DID NOT COMPLETE PROPERLY!!!" >> $logDest/${logName}_ERROR_LOG_$date.txt
		exit 1
	fi
	
	sed 's/^.*] //' $logDest/templog.txt >> $logDest/${logName}_COPY_LOG.txt
	
	echo "" >> $logDest/${logName}_COPY_LOG.txt
	echo "**************************************************************************************************" >> $logDest/${logName}_COPY_LOG.txt
	echo "The transfer finished at" $(date) >> $logDest/${logName}_COPY_LOG.txt
	echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^" >> $logDest/${logName}_COPY_LOG.txt
	echo "" >> $logDest/${logName}_COPY_LOG.txt
	
	if [[ $mail != "" ]] ; then
		echo "The transfer from $src to $dest is complete. Now beginning checksum..." | cat - $logDest/${logName}_COPY_LOG.txt | email -s "ARdump TRANSFER IS COMPLETE!" $mail
	fi
	
	echo "THIS LOG IS CURRENTLY NOT VALID AS THE CHECKSUM HAS NOT COMPLETED!!!!!" >> $logDest/${logName}_ERROR_LOG_$date.txt
	
	echo "This error log is for the copy from $src to $dest" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "Error checking began on" $(date) >> $logDest/${logName}_ERROR_LOG_$date.txt

	echo "**************************************************************************************************" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "THIS SECTION SHOWS ERRORS (IF ANY) FROM THE RSYNC TRANSFER" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "**************************************************************************************************" >> $logDest/${logName}_ERROR_LOG_$date.txt
	grep -i -n "WARNING" $logDest/templog.txt >> $logDest/${logName}_ERROR_LOG_$date.txt
	grep -i -n "ERROR" $logDest/templog.txt >> $logDest/${logName}_ERROR_LOG_$date.txt
	rm $logDest/templog.txt
	echo "" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "**************************************************************************************************" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "THIS SECTION IS ONLY USED TO SHOW FILES THAT **FAILED** THE HASH CHECK AND MAY NOT HAVE COPIED CORRECTLY" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "**************************************************************************************************" >> $logDest/${logName}_ERROR_LOG_$date.txt
	
	md5deep -e -r -n -m $logDest/${logName}_COPY_LOG.txt $dest >> $logDest/${logName}_ERROR_LOG_$date.txt 2>&1
	md5res="$?"
	
	sed '/No hash found in line/d' $logDest/${logName}_ERROR_LOG_$date.txt > $logDest/tmp.txt
	sed '/                                                                          /d' $logDest/tmp.txt > $logDest/${logName}_ERROR_LOG_$date.txt
	rm $logDest/tmp.txt
	
	if [ $md5res -eq "0" ]; then
		echo "MD5Deep has finished."
		echo "MD5Deep has finished." >> $logDest/${logName}_ERROR_LOG_$date.txt
	elif [ $md5res -eq "1" ]; then
		echo "Warning: One or more of the known hashes was not matched by any of the input files."
		echo "Warning: One or more of the known hashes was not matched by any of the input files." >> $logDest/${logName}_ERROR_LOG_$date.txt
	elif [ $md5res -eq "2" ]; then
		echo "Warning: One or more of the input values did not match any of the known hashes."
		echo "Warning: One or more of the input values did not match any of the known hashes." >> $logDest/${logName}_ERROR_LOG_$date.txt
	elif [ $md5res -eq "64" ]; then
		echo "ERROR: User error."
		echo "ERROR: User error." >> $logDest/${logName}_ERROR_LOG_$date.txt
	elif [ $md5res -eq "128" ]; then
		echo "ERROR: Internal error."
		echo "ERROR: Internal error." >> $logDest/${logName}_ERROR_LOG_$date.txt
	else
		echo "Warning: Unknown return value of MD5Deep!"
		echo "Warning: Unknown return value of MD5Deep!" >> $logDest/${logName}_ERROR_LOG_$date.txt
	fi

	echo "" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "**************************************************************************************************" >> $logDest/${logName}_ERROR_LOG_$date.txt
	echo "Checksum verification complete." $(date) >> $logDest/${logName}_ERROR_LOG_$date.txt
	
	tail -n +2 $logDest/${logName}_ERROR_LOG_$date.txt > $logDest/FILE.tmp && mv $logDest/FILE.tmp $logDest/${logName}_ERROR_LOG_$date.txt
	
	if [[ $mail != "" ]] ; then
		echo "The verfication of the $src to $dest transfer is complete!" | cat - $logDest/${logName}_ERROR_LOG_$date.txt | email -s "ARdump VERIFICATION IS COMPLETE!" $mail
	fi
}

function usage() {
	echo "ARdump $version"
	echo "Usage : ARdump <source> <destination>"
	echo "Optional Usage : ARdump <source> <destination> <email>"
	echo "ARdump will copy files from the source location to the destination location and"
	echo "verify the md5 checksums created from the source files by rsync and md5deep"
	echo "matching them with the files in the destination. It will output a copy log and"
	echo 'an error log. If an email is provided, it will send an email to the given'
	echo 'address (provided there is an active internet connection) both when the initial'
	echo 'transfer is complete and when the checksum verification finishes.'
}

if [[ $2 == "" ]] ; then
	usage
	exit
elif [[ -e $src ]] ; then

	thePath=$(basename $src)
	thePath+=":"

	finalDest=$dest/$(basename $src)
	logName=$(basename $src)
	# logName+=".$date"
	logDest=$dest/${logName}_LOGS

	if [[ ! -d $dest ]]; then
		#  # Control will enter here if $dest doesn't exist.
		make_dump
	elif [[ -d $dest ]] && [[ "$(ls -A $dest)" ]]; then
	  # Control will enter here if $dest exists and is not empty.
	  echo #new line
	  echo "WHOAH! This directory exists and is not empty. If you have files of the same NAME and DIFFERENT size in the destination directory they will be overwritten."
	  echo "***Enter 'yyy' to continue***"
	  echo "Enter anything else to cancel."
	  read input
	  if [[ $input == "yyy" ]] ; then
		  make_dump
			exit
		fi
	elif [[ "$(ls -A $dest)" == '' ]] ; then
		#control enters here if destination direcotry exists but is empty.
		echo "Directory is empty. Safe to copy."
		make_dump
	else
		"Error. Try running rsync by itself. Or give up and use Shotput."
		exit
	fi
else
	echo "ERROR! The source directory/file does not exist!"
	exit
fi
